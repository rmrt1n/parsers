(define-library (rec-desc)
  (import (scheme base)
          (chibi match)
          (utils))
  (export rec-desc-parse)
  (begin
    (define (rec-desc-parse tokens)
      (if (null? tokens)
        '()
        (car (parse-expr tokens))))

    (define (parse-expr tokens)
      (let* ((term (parse-term tokens))
             (left (car term))
             (tokens (cadr term)))
        (let loop ((left left)
                   (tokens tokens))
          (match tokens
            (() (list left tokens))
            (('PLUS tl ...)
             (let* ((term (parse-term tl))
                    (right (car term))
                    (tl (cadr term)))
               (loop `(+ ,left ,right) tl)))
            (('MINUS tl ...)
             (let* ((term (parse-term tl))
                    (right (car term))
                    (tl (cadr term)))
               (loop `(- ,left ,right) tl)))
            (('RPAREN tl ...) (list left tokens))
            (_ (syntax-err))))))

    (define (parse-term tokens)
      (let* ((factor (parse-factor tokens))
             (left (car factor))
             (tokens (cadr factor)))
        (let loop ((left left)
                   (tokens tokens))
          (match tokens
            (('STAR tl ...)
             (let* ((factor (parse-factor tl))
                    (right (car factor))
                    (tl (cadr factor)))
               (loop `(* ,left ,right) tl)))
            (('SLASH tl ...)
             (let* ((factor (parse-factor tl))
                    (right (car factor))
                    (tl (cadr factor)))
               (loop `(/ ,left ,right) tl)))
            (('PERCENT tl ...)
             (let* ((factor (parse-factor tl))
                    (right (car factor))
                    (tl (cadr factor)))
               (loop `(remainder ,left ,right) tl)))
            (((or (? number? hd) 'LPAREN 'CARET) tl ...)
             (syntax-err))
            (_ (list left tokens))))))

    (define (parse-factor tokens)
      (let* ((power (parse-power tokens))
             (left (car power))
             (tokens (cadr power)))
        (match tokens
          (('CARET tl ...)
           (let* ((power (parse-factor tl))
                  (right (car power))
                  (tl (cadr power)))
             (list `(expt ,left ,right) tl)))
          (((or (? number? hd) 'LPAREN) tl ...)
           (syntax-err))
          (_ (list left tokens)))))

    (define (parse-power tokens)
      (match tokens
        (('PLUS tl ...)
         (let* ((power-tl (parse-power tl))
                (power (car power-tl))
                (tl (cadr power-tl)))
           (list `(+ ,power) tl)))
        (('MINUS tl ...)
         (let* ((power-tl (parse-power tl))
                (power (car power-tl))
                (tl (cadr power-tl)))
           (list `(- ,power) tl)))
        (((or (? number? hd) 'LPAREN) tl ...)
         (parse-base tokens))
        (_ (syntax-err))))

    (define (parse-base tokens)
      (match tokens
        (((? number? hd) tl ...)
         (list hd tl))
        (('LPAREN tl ...)
         (let* ((expr-tl (parse-expr tl))
                (expr (car expr-tl))
                (tl (cadr expr-tl)))
           (match tl
             (('RPAREN tl ...) (list expr tl))
             (_ (error "err no closing paren")))))
        (_ (syntax-err))))
    ))

